// Online C++ compiler to run C++ program online
#include <iostream>
#include<queue>
using namespace std;
 
 class heap{
    public:
     int arr[100];
     int size;
     heap(){
         arr[0]=-1;
         size=0;
     }
    
    void insert ( int val ){
        size= size+1;
        int index=size;
        arr[index]=val;
        
        while(index>1){
            int parent =index/2;
            if(arr[parent]<arr[index]){
                swap(arr[parent],arr[index]);
                index=parent;
            }
            else{
                return ;
            }
    
        }
    }
    
    void print( ){
        for( int i=1;i<=size;i++){
            cout<< arr[i]<<" ";
        }
        cout<<endl;
    }
    void deletefromHeap(){
        if(size==0){
            cout<< " nothing  to delete "<< endl;
            return ;
        }
        arr[1]=arr[size]; // first node is assign with the last node 
        size--; // last node is deleted  by decreasing  the size
     //   take the root at right index
      int i=1;
      while(i<size){
          int leftindex=2*i;
          int rightindex=2*i+1;
          if(leftindex <size && arr[i]<arr[leftindex]){
              swap(arr[i],arr[leftindex]);
              i= leftindex;
          }
          if(rightindex <size && arr[i]<arr[rightindex]){
              swap(arr[i],arr[rightindex]);
              i= rightindex;
          }
          else{
               return ;
          }
      }
     }
   
    
     
};
  void heapify( int arr[],int n,int i){
        int largest =i;
        int left=2*i;
        int right =2*i +1;
        if(left<=n && arr[largest]<arr[left]){
            largest = left;
        }
        if( right<=n && arr[largest]< arr[right]){
            largest = right;
        }
        
        if (largest!= i){
            swap(arr[largest],arr[i]);
            heapify(arr,n, largest);
        }
    }

void heapsort(int arr[],int n){
     int size=n;
     while(size>1){
        //step 1-> swap 
        swap(arr[size],arr[1]);
        size--;
        // step 2
        heapify(arr,size,1);
        
     }
}    

int main() {
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);
    h.insert(60);
    h.print();
    cout<<"after the delete the new heap"<<endl;
    h.deletefromHeap();
    h.print();
    
     int arr[6]={-1,54,53,55,52,50};
     int n=5;
     for(int i=n/2;i>0;i--){
    // we need to do heapify the array only up to n/2 beacause  after the n/2 there is only he leaf node which is already a heap (beacause its child is null)
     
         heapify(arr,n,i);
     }
     cout<<"printing the array now "<< endl;
    for(int i=1;i<=n;i++){
         cout<< arr[i]<<" ";
     }
    cout<< endl;
    // heap sort
    heapsort(arr,n);
     cout<<"printing the array after  the sorting "<< endl;
    for(int i=1;i<=n;i++){
         cout<< arr[i]<<" ";
     }
    cout<< endl;
    cout<< "using the priority queue"<<endl;
    //max heap
    priority_queue<int> pq;
    pq.push(4);
    pq.push(5);
    pq.push(7);
    pq.push(48);
    cout<<"printing the top element "<<pq.top()<<endl;
    pq.pop();
    cout<<"printing the top element "<<pq.top()<<endl;
    
    //min heap
    priority_queue<int,vector<int>, greater<int> > minheap;
    minheap.push(4);
     minheap.push(2);
      minheap.push(5);
       minheap.push(3);
       cout<<"printing the top elemen in minheap t "<<pq.top()<<endl;
    pq.pop();
    cout<<"printing the top element "<<pq.top()<<endl;
    
    
    
    
    return 0;
}
